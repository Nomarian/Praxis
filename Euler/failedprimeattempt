#!/usr/bin/lua5.3

-- find prime factors of a number

-- first try
function factors1(n) -- Returns a list of factors
 local t = {{1,n}}
 local x = n
 for i=2,n do
  if n%i==0 then
   x = math.ceil(n/i)
   t[#t+1] = {i,x}
   if x<=i then break end
  end
 end
 return t
end

-- second try
function factors2(n) -- Returns a list of factors
 local t,x,i = {{1,n}},n,2
 while i<x do
  x = math.ceil(n/i)
  if n%i==0 then
   t[#t+1] = {i,x}
  end
  i = i + 1
 end
 print("\t<" .. i..">")
 return t
end

-- uses sqrt instead
function factors3(n) -- Returns a list of factors
 local t,limit = {{1,n}},math.floor(math.sqrt(n))
 for i=2,limit do
  if n%i==0 then
   t[#t+1] = {i,math.ceil(n/i)}
  end
 end
 return t
end

factors = factors3

function testFactors(n)
 for x=1,n do print(x)
  for k,v in pairs(factors(x)) do
   print("\t" .. v[1] .. "x" .. v[2])
  end
 end
end

-- super easy, super smaht (and should be correct)
function isprime1(n)
 return #factors(n) == 1
end

-- basically factors() but fine tuned for primes
function isprime2(n)
 if n==1 then return false end
 if n==2 or n==3 or n==5 or n==7 or n==11 or n==13 then return true end
 if n%2==0 then return false end
 
 for i=3,math.floor(math.sqrt(n)),2 do
  if n%i==0 then return false end
 end
 return true
end

-- same as isprime2 but with a finely tuned loop
-- but it seems to be slower? or not worth it?
function isprime3(n)
 if n==1 then return false end
 if n==2 or n==3 or n==5 or n==7 or n==11 or n==13 then return true end
 if n%2==0 or n%3==0 or n%5==0 or n%7==0 or n%11==0 or n%13==0 then
  return false
 end

 local limit,i = math.floor(math.sqrt(n)),15
 while i<limit do
  for a=1,4 do -- this might be useful in some other place
   i = i + 2
   if n%i==0 then return false end
  end
  i = i + 2
 end
 return true
end

primes = {2,3,5,7,11,13,17,19}

isprime = isprime2

 -- better to hunt normally for the first 100 numbers, then go with the sophisticated loop?

function isprimetester(n,f)
 print(2)
 for i=3,n,2 do if f(i) then print(i) end end
end

-- isprimetester(10000,isprime2)

-- a fast prime search should be recursive. good for the first 1000 numbers maybe?

-- this is a leap prime search, that is, it assumes, that the next prime
-- is whatever comes next after the last prime + 2

primes = {2,3,5,7,11,13,17,19}
-- checks if its prime but using primelist
-- will also fill the prime list as required
function isprimebutdb(n) -- t/f if its prime
 if n==1 then return false end
 local limit = math.ceil( math.sqrt(n) )
 -- checks using primelist
 for k,v in pairs(primes) do
  if v==n then return true end
  if n%v==0 then return false end
  if v > limit then return true end
 end

 local k = #primes
 
 -- Out` of primes to search for, finding a new prime and filling list
 for i=primes[#primes] + 2,limit,2 do
  if isprimebutdb(i) then print(i) primes[#primes + 1] = i end
 end

 for i=k+1,#primes do
  local v = primes[k]
  if v==n then return true end
  if n%v==0 then return false end
  if v > limit then return true end
 end

-- return isprimebutdb(n)
 -- This should not happen, 
-- return isprimebutdb(n)
end

function primefiller(n)
 local 
 while #primes < n do
 end
end

 -- you should be able to use isprime because of the limit

function tester()
 for i=1,100 do
  io.write(i .. " ")
  print( isprimebutdb(i) )
 end
end
-- tester()
print(isprimebutdb(97))
print(#primes)

--[[
-- finds the nextprime for prime list
function nextprime()
 local i=primes[#primes] + 2,
 repeat
  i = i + 2
 until isprimeinprimelist(i)
end

-- checks if its prime but using primelist
function isprimeprime(n) -- t/f if its prime
 if n==1 then return false end
 if n <= primes[#primes] then
  for k,v in pairs(primes) do
   if v==n then return true end
   if n%v==0 then return false end
  end
 end
 return false
end





-- can probably check if its prime by having 2 nested for loops
-- or even recursion
]]
